# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'ventana.ui'
#
# Created by: PyQt5 UI code generator 5.15.2
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.
import sqlite3
import sys
from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtWidgets import QTableWidgetItem
from scipy import spatial
from numpy import dot
from numpy.linalg import norm


class Ui_MainWindow(object):
    def __init__(self):
        self.con = sqlite3.connect('movies.db')
        if self.con == None:
            print("Hola")
        else:
            print('Funciona')
        self.cursor = self.con.cursor()

    def setupUi(self, MainWindow):
        self.cursor.execute('SELECT userId FROM ratings GROUP BY userId')
        resultado = self.cursor.fetchall()
        Usuarios = []
        for [x] in resultado:
            var = str(x)
            Usuarios.append(var)
        #print(Usuarios)


        #self.cursor.execute('SELECT userId FROM ratings GROUP BY userId')
        #resultado = self.cursor.fetchall()
        #for x in 610:
            #self.cursor.execute('SELECT movieId FROM ratings WHERE userId != ?', x)
            #result = self.cursor.fetchall()
            #pelisNoVistas = []
        #for [x] in result:
            #var = str(x)
            #pelisNoVistas.append(var)


        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(852, 606)
        font = QtGui.QFont()
        font.setUnderline(True)
        MainWindow.setFont(font)
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.Recomendar_Button = QtWidgets.QPushButton(self.centralwidget)
        self.Recomendar_Button.setGeometry(QtCore.QRect(620, 50, 111, 41))
        font = QtGui.QFont()
        font.setPointSize(10)
        self.Recomendar_Button.setFont(font)
        self.Recomendar_Button.setObjectName("Recomendar_Button")
        self.Predecir_Button = QtWidgets.QPushButton(self.centralwidget)
        self.Predecir_Button.setGeometry(QtCore.QRect(630, 490, 111, 41))
        font = QtGui.QFont()
        font.setPointSize(10)
        self.Predecir_Button.setFont(font)
        self.Predecir_Button.setObjectName("Predecir_Button")
        self.horizontal_line = QtWidgets.QFrame(self.centralwidget)
        self.horizontal_line.setGeometry(QtCore.QRect(0, 410, 851, 16))
        self.horizontal_line.setFrameShape(QtWidgets.QFrame.HLine)
        self.horizontal_line.setFrameShadow(QtWidgets.QFrame.Sunken)
        self.horizontal_line.setObjectName("horizontal_line")
        self.recomendaciones_label = QtWidgets.QLabel(self.centralwidget)
        self.recomendaciones_label.setGeometry(QtCore.QRect(40, 10, 171, 16))
        font = QtGui.QFont()
        font.setPointSize(14)
        font.setBold(True)
        font.setUnderline(True)
        font.setWeight(75)
        self.recomendaciones_label.setFont(font)
        self.recomendaciones_label.setObjectName("recomendaciones_label")
        self.items_ranking_label = QtWidgets.QLabel(self.centralwidget)
        self.items_ranking_label.setGeometry(QtCore.QRect(40, 100, 171, 16))
        font = QtGui.QFont()
        font.setPointSize(10)
        font.setBold(False)
        font.setUnderline(False)
        font.setWeight(50)
        self.items_ranking_label.setFont(font)
        self.items_ranking_label.setObjectName("items_ranking_label")
        self.selecciona_usuario_label = QtWidgets.QLabel(self.centralwidget)
        self.selecciona_usuario_label.setGeometry(QtCore.QRect(40, 60, 171, 16))
        font = QtGui.QFont()
        font.setPointSize(10)
        font.setBold(False)
        font.setUnderline(False)
        font.setWeight(50)
        self.selecciona_usuario_label.setFont(font)
        self.selecciona_usuario_label.setObjectName("selecciona_usuario_label")
        self.selecciona_usuario_label_2 = QtWidgets.QLabel(self.centralwidget)
        self.selecciona_usuario_label_2.setGeometry(QtCore.QRect(40, 440, 171, 16))
        font = QtGui.QFont()
        font.setPointSize(10)
        font.setBold(False)
        font.setUnderline(False)
        font.setWeight(50)
        self.selecciona_usuario_label_2.setFont(font)
        self.selecciona_usuario_label_2.setObjectName("selecciona_usuario_label_2")
        self.selecciona_peli_label = QtWidgets.QLabel(self.centralwidget)
        self.selecciona_peli_label.setGeometry(QtCore.QRect(40, 490, 171, 16))
        font = QtGui.QFont()
        font.setPointSize(10)
        font.setBold(False)
        font.setUnderline(False)
        font.setWeight(50)
        self.selecciona_peli_label.setFont(font)
        self.selecciona_peli_label.setObjectName("selecciona_peli_label")
        self.prediccion_label = QtWidgets.QLabel(self.centralwidget)
        self.prediccion_label.setGeometry(QtCore.QRect(40, 530, 171, 16))
        font = QtGui.QFont()
        font.setPointSize(10)
        font.setBold(False)
        font.setUnderline(False)
        font.setWeight(50)
        self.prediccion_label.setFont(font)
        self.prediccion_label.setObjectName("prediccion_label")
        self.umbral_similitud_textEdit = QtWidgets.QTextEdit(self.centralwidget)
        self.umbral_similitud_textEdit.setGeometry(QtCore.QRect(390, 90, 61, 31))
        font = QtGui.QFont()
        font.setUnderline(False)
        self.umbral_similitud_textEdit.setFont(font)
        self.umbral_similitud_textEdit.setObjectName("umbral_similitud_textEdit")
        self.umbral_similitud_label = QtWidgets.QLabel(self.centralwidget)
        self.umbral_similitud_label.setGeometry(QtCore.QRect(270, 100, 171, 16))


        

        font = QtGui.QFont()
        font.setPointSize(10)
        font.setBold(False)
        font.setUnderline(False)
        font.setWeight(50)
        self.umbral_similitud_label.setFont(font)
        self.umbral_similitud_label.setObjectName("umbral_similitud_label")
        self.Items_ranking_textEdit = QtWidgets.QTextEdit(self.centralwidget)
        self.Items_ranking_textEdit.setGeometry(QtCore.QRect(130, 90, 61, 31))
        font = QtGui.QFont()
        font.setUnderline(False)
        self.Items_ranking_textEdit.setFont(font)
        self.Items_ranking_textEdit.setObjectName("Items_ranking_textEdit")
        self.comboBox_Usuario1 = QtWidgets.QComboBox(self.centralwidget)
        self.comboBox_Usuario1.setGeometry(QtCore.QRect(200, 60, 69, 22))
        self.comboBox_Usuario1.setObjectName("comboBox_Usuario1")
        self.comboBox_Usuario1.addItems(Usuarios)
        self.comboBox_Usuario2 = QtWidgets.QComboBox(self.centralwidget)
        self.comboBox_Usuario2.setGeometry(QtCore.QRect(180, 440, 69, 22))
        self.comboBox_Usuario2.setObjectName("comboBox_Usuario2")
        self.comboBox_Usuario2.addItem('Null')
        self.comboBox_Usuario2.addItems(Usuarios)
        self.ranking_label = QtWidgets.QLabel(self.centralwidget)
        self.ranking_label.setGeometry(QtCore.QRect(380, 140, 91, 21))
        font = QtGui.QFont()
        font.setPointSize(12)
        font.setBold(True)
        font.setUnderline(False)
        font.setWeight(75)
        self.ranking_label.setFont(font)
        self.ranking_label.setObjectName("ranking_label")
        self.resultado_prediccion = QtWidgets.QLabel(self.centralwidget)
        self.resultado_prediccion.setGeometry(QtCore.QRect(120, 530, 431, 16))
        font = QtGui.QFont()
        font.setPointSize(12)
        font.setBold(True)
        font.setUnderline(False)
        font.setWeight(75)
        self.resultado_prediccion.setFont(font)
        self.resultado_prediccion.setText("")
        self.resultado_prediccion.setObjectName("resultado_prediccion")
        self.comboBox_Pelicula = QtWidgets.QComboBox(self.centralwidget)
        self.comboBox_Pelicula.setGeometry(QtCore.QRect(180, 490, 69, 22))
        self.comboBox_Pelicula.setObjectName("comboBox_Pelicula")
        #self.comboBox_Pelicula.setEnabled(False)
        self.tableWidget = QtWidgets.QTableWidget(self.centralwidget)
        self.tableWidget.setGeometry(QtCore.QRect(310, 170, 211, 192))
        self.tableWidget.setObjectName("tableWidget")
        self.tableWidget.setColumnCount(2)
        self.tableWidget.setRowCount(0)
        item = QtWidgets.QTableWidgetItem()
        self.tableWidget.setHorizontalHeaderItem(0, item)
        item = QtWidgets.QTableWidgetItem()
        self.tableWidget.setHorizontalHeaderItem(1, item)
        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 852, 21))
        self.menubar.setObjectName("menubar")
        MainWindow.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)
        
        #AÃ‘ADIMOS LAS PELIS NO VISTAS AL COMBO BOX

        self.comboBox_Usuario2.currentTextChanged.connect(self.on_combobox_changed)
        self.Predecir_Button.clicked.connect(self.prueba)
        self.Recomendar_Button.clicked.connect(self.recomendar)   



    def on_combobox_changed(self, value):
        print("combobox changed", value)
        self.cursor.execute('SELECT DISTINCT movieId FROM movies WHERE movieId not in (SELECT movieId from ratings WHERE userId = ?)', (value,))
        result = self.cursor.fetchall()
        pelisNoVistas = []
        for [x] in result:
            var = str(x)
            pelisNoVistas.append(var)
        #print(pelisNoVistas)
        self.comboBox_Pelicula.clear()
        self.comboBox_Pelicula.addItems(pelisNoVistas)

    def prueba(self):
        usuario = str(self.comboBox_Usuario2.currentText())
        pelicula =str(self.comboBox_Pelicula.currentText())
        self.predecir(usuario, pelicula)


    def predecir(self, usuario, pelicula):
        self.usuario = str(self.comboBox_Usuario2.currentText())
        self.pelicula =str(self.comboBox_Pelicula.currentText())
        
        self.cursor.execute('SELECT userId FROM ratings WHERE movieId = ?', (pelicula,))
        resultado = self.cursor.fetchall()
        usuarios = [] #usuarios que han rateado la peli a predecir
        #Lo hacemos un especie de lista
        self.resultado_prediccion.clear()
        self.resultado_prediccion.setText("Calculando...")
        for row in resultado: 
            usuarios.append(row[0])
        #usuarios es el vector inicial
        #print(usuarios) #Vector inicial

        #Query para ver las peliculas que ha visto el usuario
        self.cursor.execute('SELECT movieId FROM ratings WHERE userId = ?', (usuario,))
        #SELECT movieId from ratings WHERE userId = todas las pelis las cuales el usuario 2 ha comendado
        resultado = self.cursor.fetchall()
        pelisVistas = []
        for row in resultado:
            pelisVistas.append(row[0])
        #pelisVistas son todas las peliculas que ha visto el usuario
        #print( pelisVistas) FUNCIONA
        vectoresUsuarioRating = []
        #Vector de pelis vistas por el usuario
        for i in pelisVistas:
            pelicula = i
            userid_vectores = [] #Almacena los ususarios id de todos los vectores
            #Sacamos todos los usuarios que han dado rating a cada pelio que ha visto el usuario
            self.cursor.execute('SELECT userId FROM ratings WHERE movieId = ?', (pelicula,))
            resultado = self.cursor.fetchall()
            for row in resultado:
                userid_vectores.append(row[0]) #Insertamos userId
            vectoresUsuarioRating.append(userid_vectores) #FUNCIONA CORRECTAMENTE
        #print(vectoresUsuarioRating[0]) #Todos los vectores de usuarios
        iguales = []
        ordenPelisVistas = []
        x =0 
        
        for i in vectoresUsuarioRating: 
            vectortemporal = []
            vectortemporal = i
            #print(vectortemporal)
            #peli [usuario, rating.....], peli......
            #print(vectortemporal)
            check = all(item in vectortemporal for item in usuarios)
            if check:
                usuarios_iguales = set(vectortemporal).intersection(usuarios)
                #print(type(list(usuarios_iguales)))
                vector = list(usuarios_iguales)
                print(vector, type(vector))
                iguales.append(vector)
                ordenPelisVistas.append(pelisVistas[x])
                x+=1
            else:
                x+=1

        if len(iguales) == 0:
            self.resultado_prediccion.setText('Error, no hay vectores iguales')
            return #print('No se ha encontrado ningun vector que coincida con el vector original')
            
        else:
            print("Ha funcionado")
            #print(ordenPelisVistas)
        
        #Similitud del coseno
        #Por cada vector realizar el coseno de similitud entre el original y el que tenemos
        pelis_coseno = [] #171867
        z = 0
        for x in iguales: 
            #Funciona
            similitud = 1 - spatial.distance.cosine(x, usuarios) 
            if similitud >= -1:
                pelis_coseno.append(ordenPelisVistas[z])
                print(ordenPelisVistas[z])
                z+=1
                
            else:
                print("Error en este vector")
                z +=1
        print(pelis_coseno)
        #print(pelis_coseno) #Cojo las pelis bien
        #Cuando son iguales ahora hay que coger las valoraciones
        #Similud del coseno
        media = 0 
        denominador = 0
        for i in pelis_coseno:
            #Da mal la consulta
            self.cursor.execute('SELECT rating FROM ratings WHERE userId = ?1 AND movieId = ?2', (usuario, i,))
            resultado = self.cursor.fetchall()
            for row in resultado:
                ratings_usuario = row[0]
            #print(ratings_usuario)
            media += ratings_usuario
            denominador +=1
        prediccion = media/denominador 
        print(prediccion)  
        self.resultado_prediccion.setText(str(prediccion))
        return iguales 

    



















    def recomendar(self):
        ranking = self.Items_ranking_textEdit.toPlainText()
        usuario = str(self.comboBox_Usuario1.currentText())
        umbral = self.umbral_similitud_textEdit.toPlainText()
        
        # print(usuario, ranking, umbral)
        umbral = float(umbral)
        umbral = int(umbral)
        print(type(umbral))
        #Insertamos las filas necesarias
        x = 0
        self.tableWidget.clear()
        while x < int(ranking): #Funciona
            rowPosition = self.tableWidget.rowCount()
            self.tableWidget.insertRow(rowPosition)
            x+=1
     
        pelisVistas = [] #Pelis que ha visto el usuario
        self.cursor.execute('SELECT movieId FROM ratings WHERE userId = ?', (usuario,)) #Todas las pelis que ha visto el usuario las cuales podemos reocmendar
        result = self.cursor.fetchall()
        for row in result:
            pelisVistas.append(row[0])
        #print(pelisVistas) #FUNCIONA
        
        #Pelis que no ha visto el usuario
        self.cursor.execute('SELECT DISTINCT movieId FROM movies WHERE movieId not in (SELECT movieId from ratings WHERE userId = ?)', (usuario,))
        result = self.cursor.fetchall()
        pelisNoVistas = []
        for row in result:
            pelisNoVistas.append(row[0])
        #print(pelisNoVistas) #Funciona
        for x in pelisNoVistas: #Por cada peli que el usuario no ha visto
            vector_inicial = []
            print("Por cada peli que el usuario no ha visto")
            self.cursor.execute('SELECT userId FROM ratings WHERE movieId = ?', (x,)) #Vector de la peli
            resultado = self.cursor.fetchall()
            for row in resultado:
                vector_inicial.append(row[0]) #usuario que han rateado la primera peli
            #print(vector_inicial)

            #Todos los vectores de las peliculas
            vectoresUsuarioRating = self.vectorPelisNoVistas(pelisNoVistas) #Sacar el vector del resto de las pelis vistas
            #print(vectoresUsuarioRating)
            iguales, ordenPelisVistas = self.compararVectores(vectoresUsuarioRating, vector_inicial, pelisVistas) #Retornamos los vectores iguales y los ids de las pelis 
            #print(iguales) #Vectores que han dado igual
             #Id de las peliculas que han tenido el vector igual

            
            print(ordenPelisVistas)
            if len(iguales) == 0:
                print("Esta peli no tiene vectores iguales, pasamos a la siguiente")
            else:
                print("Entro a calcular el coseno")
                pelis_coseno = []
                y = 0
                for vector in iguales: 
                    similitud = 1 - spatial.distance.cosine(vector, vector_inicial)
                    print(similitud)
                    if similitud >= umbral:
                        pelis_coseno.append(ordenPelisVistas[y])
                        y+=1
                    else:
                        y+=1
                numerador = 0 
                denominador = 0
                peli_rating = []
                lista_predicciones = []
                for i in pelis_coseno:
                    #Da mal la consulta
                    self.cursor.execute('SELECT rating FROM ratings WHERE userId = ?1 AND movieId = ?2', (usuario, i,))
                    resultado = self.cursor.fetchall()
                    for row in resultado:
                        ratings_usuario = row[0]
                    #print(ratings_usuario)
                    numerador += ratings_usuario
                    denominador +=1
                prediccion = numerador/denominador
                print(prediccion)
                lista_predicciones.append(prediccion) #Me guardo todas las predicciones realizadas
                peli_rating.append(x)
                #print(lista_predicciones)
        print(lista_predicciones)
            #Comparar todos los ratings 


    def vectorPelisNoVistas(self, pelisNoVistas):
        vectoresUsuarioRating = []
        print("Entro en la funcion para sacar los vectores de las pelis")
        for y in pelisNoVistas:
            userid_vectores = [] #Almacena los ususarios id de todos los vectores
            #Sacamos todos los usuarios que han dado rating a cada pelio que ha visto el usuario
            self.cursor.execute('SELECT userId FROM ratings WHERE movieId = ?', (y,))
            resultado = self.cursor.fetchall()
            for row in resultado:
                userid_vectores.append(row[0]) #Insertamos userId
            vectoresUsuarioRating.append(userid_vectores) #FUNCIONA CORRECTAMENTE
            #Ya tengo todos los vectores
        print("Llego al final de la funcion")
        #print(vectoresUsuarioRating)
        return vectoresUsuarioRating

    def compararVectores(self, vectoresUsuarioRating, vector_inicial, pelisVistas):
        ordenPelisVistas = []
        iguales = []
        z = 0
        for i in vectoresUsuarioRating: 
            check = all(item in i for item in vector_inicial)
            if check:
                usuarios_iguales = set(i).intersection(vector_inicial)
                vector = list(usuarios_iguales)
                #print(vector, type(vector))
                iguales.append(vector)
                ordenPelisVistas.append(pelisVistas[z])
                z+=1
            else:
                z+=1
        print(ordenPelisVistas)
        return iguales, ordenPelisVistas

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "MainWindow"))
        self.Recomendar_Button.setText(_translate("MainWindow", "Recomendar!"))
        self.Predecir_Button.setText(_translate("MainWindow", "Predecir!"))
        self.recomendaciones_label.setText(_translate("MainWindow", "Recomendaciones"))
        self.items_ranking_label.setText(_translate("MainWindow", "Items ranking"))
        self.selecciona_usuario_label.setText(_translate("MainWindow", "Selecciona un Usuario (ID)"))
        self.selecciona_usuario_label_2.setText(_translate("MainWindow", "Selecciona un Usuario:"))
        self.selecciona_peli_label.setText(_translate("MainWindow", "Selecciona una pelÃ­cula:"))
        self.prediccion_label.setText(_translate("MainWindow", "PredicciÃ³n:"))
        self.umbral_similitud_textEdit.setHtml(_translate("MainWindow", "<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.0//EN\" \"http://www.w3.org/TR/REC-html40/strict.dtd\">\n"
"<html><head><meta name=\"qrichtext\" content=\"1\" /><style type=\"text/css\">\n"
"p, li { white-space: pre-wrap; }\n"
"</style></head><body style=\" font-family:\'MS Shell Dlg 2\'; font-size:9.75pt; font-weight:400; font-style:normal;\">\n"
"<p align=\"center\" style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><span style=\" font-size:11pt;\">0</span></p></body></html>"))
        self.umbral_similitud_label.setText(_translate("MainWindow", "Umbral de similitud:"))
        self.Items_ranking_textEdit.setHtml(_translate("MainWindow", "<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.0//EN\" \"http://www.w3.org/TR/REC-html40/strict.dtd\">\n"
"<html><head><meta name=\"qrichtext\" content=\"1\" /><style type=\"text/css\">\n"
"p, li { white-space: pre-wrap; }\n"
"</style></head><body style=\" font-family:\'MS Shell Dlg 2\'; font-size:9.75pt; font-weight:400; font-style:normal;\">\n"
"<p align=\"center\" style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><span style=\" font-size:10pt;\">0</span></p></body></html>"))
        self.ranking_label.setText(_translate("MainWindow", "Ranking"))
        item = self.tableWidget.horizontalHeaderItem(0)
        item.setText(_translate("MainWindow", "ID item"))
        item = self.tableWidget.horizontalHeaderItem(1)
        item.setText(_translate("MainWindow", "Prediccion"))
    
    

if __name__ == "__main__":
    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec_())



 #con = sqlite3.connect('movies.db')
        #if con == None:
        #    print("Hola")
        #else:
            #print('Funciona')
        #cursor = con.cursor()